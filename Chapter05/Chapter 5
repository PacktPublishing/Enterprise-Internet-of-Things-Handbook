‘usestrict‘;

varProtocol=require(‘azure-iot-device-mqtt‘).Mqtt;
varClient=require(‘azure-iot-device‘).Client;
varMessage=require(‘azure-iot-device‘).Message;
varasync=require(‘async‘);

varrpiDhtSensor=require(‘rpi-dht-sensor‘);
vardht=newrpiDhtSensor.DHT11(2);//`2`=>GPIO2

varconnectionString=‘HostName=Pi3-DHT11-Nodes.azure-devices.net;DeviceId=Pi3-DHT11-Node;SharedAccessKey=uvP9Tk+LFNJB0D6A2bhgKNx4qo0VOj2j5GfZ1Z0EAjU=‘;

varclient=Client.fromConnectionString(connectionString,Protocol);

constNODE_ID=‘Pi3-DHT11-Node‘;
constTAG=‘[‘+NODE_ID+‘]>>>>>>>>>‘;

varconnectCallback=function(err){
if(err){
console.error(TAG,‘Couldnotconnect:‘+err.message);
}else{
console.log(TAG,‘Clientconnected‘);

//CreatedeviceTwin
client.getTwin(function(err,twin){
if(err){
console.error(TAG,‘Couldnotgettwin‘);
}else{
console.log(TAG,‘Twincreated‘);
sendData(twin);
}
});
}
};


functionsendDataEvent(message,callback){
client.sendEvent(message,function(err,info){
if(!err)console.log(TAG,‘DataSent‘);
callback(err);
});
}

functionupdateTwin(twin,message,callback){
twin.properties.reported.update(message,function(err){
if(!err)console.log(TAG,‘TwinUpdated‘);
callback(err);
});
}

functionfetchData(){
varreadout=dht.read();
vartemp=readout.temperature.toFixed(2);
varhumd=readout.humidity.toFixed(2);

return{
“temp“:temp,
“humd“:humd
};
}


functionsendData(twin){
vardata=fetchData();

varmessage=newMessage(JSON.stringify(data));

async.parallel({
sendDataEvent:function(callback){
sendDataEvent(message,callback);
},
updateTwin:function(callback){
updateTwin(twin,data,callback);
}
},
function(err,results){
if(err)throwerr;
	console.log(TAG,‘Waitingfor30seconds‘);
setTimeout(function(){
sendData(twin);
},3000);
});
}

client.open(connectCallback);
